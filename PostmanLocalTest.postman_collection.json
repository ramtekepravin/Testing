{
	"info": {
		"_postman_id": "feb0f5b4-643e-456d-81db-b34010601a35",
		"name": "PostmanLocalTest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9706968"
	},
	"item": [
		{
			"name": "Get All Carts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Verify the status code is 200\r",
							"pm.test(\"Verify the status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://fakestoreapi.com/carts",
					"protocol": "https",
					"host": [
						"fakestoreapi",
						"com"
					],
					"path": [
						"carts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Single Cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validating or writing test script using Snippets \r",
							"\r",
							"\r",
							"// Verify the status code is 200\r",
							"pm.test(\"Verify the status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify response time is less than 1000ms\r",
							"\r",
							"pm.test(\"Verify response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// Verify the response has string Products\r",
							"pm.test(\"Verify the response has string Products\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"products\");\r",
							"});\r",
							"\r",
							"// Verify the value of key in response -- here value of UserId = 3\r",
							"pm.test(\"Verify the value of key userId in response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.userId).to.eql(3);\r",
							"});\r",
							"\r",
							"// Verifying content type is present\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://fakestoreapi.com/carts/5",
					"protocol": "https",
					"host": [
						"fakestoreapi",
						"com"
					],
					"path": [
						"carts",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post Method Add record",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/* To create any new record we need to use post / put call for this we need to send data in JSON format.In Body part of Request we need to select RAW and the then type as JSON.\r",
							"Add the data in JSON format which is requrired for creating record. */ \r",
							"\r",
							"// Verify the response status code is 201\r",
							"pm.test(\"Verify the response status code is 201\", function (){\r",
							"\r",
							"    pm.response.to.have.status(201);\r",
							"\r",
							"})\r",
							"\r",
							"// Verify response body has name value as Nitin\r",
							"pm.test(\"Verify response body has name value as Nitin\", function(){\r",
							"    \r",
							"    pm.expect(pm.response.text()).to.include(\"Nitin\");\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Nitin Ramteke\",\r\n    \"job\": \"Database Admin\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		}
	]
}